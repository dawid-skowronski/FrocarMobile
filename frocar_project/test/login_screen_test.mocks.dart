// Mocks generated by Mockito 5.4.6 from annotations
// in test_project/test/login_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i11;

import 'package:flutter/material.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:test_project/models/car_listing.dart' as _i5;
import 'package:test_project/models/car_rental.dart' as _i6;
import 'package:test_project/models/car_rental_review.dart' as _i7;
import 'package:test_project/models/notification.dart' as _i8;
import 'package:test_project/providers/notification_provider.dart' as _i12;
import 'package:test_project/providers/theme_provider.dart' as _i9;
import 'package:test_project/services/api_service.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ApiService].
///
/// See the documentation for Mockito's code generation for more information.
class MockApiService extends _i1.Mock implements _i2.ApiService {
  MockApiService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseUrl =>
      (super.noSuchMethod(
            Invocation.getter(#baseUrl),
            returnValue: _i3.dummyValue<String>(
              this,
              Invocation.getter(#baseUrl),
            ),
          )
          as String);

  @override
  _i4.Future<Map<String, dynamic>> register(
    String? username,
    String? email,
    String? password,
    String? confirmPassword,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#register, [
              username,
              email,
              password,
              confirmPassword,
            ]),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<Map<String, dynamic>> login(String? username, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#login, [username, password]),
            returnValue: _i4.Future<Map<String, dynamic>>.value(
              <String, dynamic>{},
            ),
          )
          as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<bool> isTokenValid() =>
      (super.noSuchMethod(
            Invocation.method(#isTokenValid, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<String?> getUsername() =>
      (super.noSuchMethod(
            Invocation.method(#getUsername, []),
            returnValue: _i4.Future<String?>.value(),
          )
          as _i4.Future<String?>);

  @override
  _i4.Future<void> changeUsername(String? newUsername) =>
      (super.noSuchMethod(
            Invocation.method(#changeUsername, [newUsername]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> logout() =>
      (super.noSuchMethod(
            Invocation.method(#logout, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> createCarListing(_i5.CarListing? carListing) =>
      (super.noSuchMethod(
            Invocation.method(#createCarListing, [carListing]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateCarListing(_i5.CarListing? carListing) =>
      (super.noSuchMethod(
            Invocation.method(#updateCarListing, [carListing]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.CarListing>> getUserCarListings() =>
      (super.noSuchMethod(
            Invocation.method(#getUserCarListings, []),
            returnValue: _i4.Future<List<_i5.CarListing>>.value(
              <_i5.CarListing>[],
            ),
          )
          as _i4.Future<List<_i5.CarListing>>);

  @override
  _i4.Future<List<_i5.CarListing>> getCarListings() =>
      (super.noSuchMethod(
            Invocation.method(#getCarListings, []),
            returnValue: _i4.Future<List<_i5.CarListing>>.value(
              <_i5.CarListing>[],
            ),
          )
          as _i4.Future<List<_i5.CarListing>>);

  @override
  _i4.Future<void> deleteCarListing(int? listingId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteCarListing, [listingId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> createCarRental(
    int? carListingId,
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createCarRental, [
              carListingId,
              startDate,
              endDate,
            ]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i6.CarRental>> getUserCarRentals() =>
      (super.noSuchMethod(
            Invocation.method(#getUserCarRentals, []),
            returnValue: _i4.Future<List<_i6.CarRental>>.value(
              <_i6.CarRental>[],
            ),
          )
          as _i4.Future<List<_i6.CarRental>>);

  @override
  _i4.Future<List<_i7.CarRentalReview>> getReviewsForListing(int? listingId) =>
      (super.noSuchMethod(
            Invocation.method(#getReviewsForListing, [listingId]),
            returnValue: _i4.Future<List<_i7.CarRentalReview>>.value(
              <_i7.CarRentalReview>[],
            ),
          )
          as _i4.Future<List<_i7.CarRentalReview>>);

  @override
  _i4.Future<void> addReview(int? carRentalId, int? rating, String? comment) =>
      (super.noSuchMethod(
            Invocation.method(#addReview, [carRentalId, rating, comment]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<_i8.NotificationModel>> fetchNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#fetchNotifications, []),
            returnValue: _i4.Future<List<_i8.NotificationModel>>.value(
              <_i8.NotificationModel>[],
            ),
          )
          as _i4.Future<List<_i8.NotificationModel>>);

  @override
  _i4.Future<void> markNotificationAsRead(int? notificationId) =>
      (super.noSuchMethod(
            Invocation.method(#markNotificationAsRead, [notificationId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<List<Map<String, dynamic>>> fetchAccountNotifications() =>
      (super.noSuchMethod(
            Invocation.method(#fetchAccountNotifications, []),
            returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i4.Future<List<Map<String, dynamic>>>);

  @override
  _i4.Future<void> markAccountNotificationAsRead(int? notificationId) =>
      (super.noSuchMethod(
            Invocation.method(#markAccountNotificationAsRead, [notificationId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [ThemeProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockThemeProvider extends _i1.Mock implements _i9.ThemeProvider {
  MockThemeProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.ThemeMode get themeMode =>
      (super.noSuchMethod(
            Invocation.getter(#themeMode),
            returnValue: _i10.ThemeMode.system,
          )
          as _i10.ThemeMode);

  @override
  bool get isDarkMode =>
      (super.noSuchMethod(Invocation.getter(#isDarkMode), returnValue: false)
          as bool);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> loadTheme() =>
      (super.noSuchMethod(
            Invocation.method(#loadTheme, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> toggleTheme() =>
      (super.noSuchMethod(
            Invocation.method(#toggleTheme, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [NotificationProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationProvider extends _i1.Mock
    implements _i12.NotificationProvider {
  MockNotificationProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get notificationCount =>
      (super.noSuchMethod(Invocation.getter(#notificationCount), returnValue: 0)
          as int);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  void setNotificationCount(int? count) => super.noSuchMethod(
    Invocation.method(#setNotificationCount, [count]),
    returnValueForMissingStub: null,
  );

  @override
  void incrementNotificationCount() => super.noSuchMethod(
    Invocation.method(#incrementNotificationCount, []),
    returnValueForMissingStub: null,
  );

  @override
  void resetNotificationCount() => super.noSuchMethod(
    Invocation.method(#resetNotificationCount, []),
    returnValueForMissingStub: null,
  );

  @override
  void addListener(_i11.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i11.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
